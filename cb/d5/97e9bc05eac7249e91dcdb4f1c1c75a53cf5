r37121 でインラインキャッシュから切り出したメソッド呼び出しのキャッシュ用の構造
体 rb_call_info_t を拡張して、メソッドのID(メソッド名のシンボルの内部表現)、
flag、引数の数、ブロックの命令列などメソッド呼び出しに必要な情報をまとめて持た
せて、この構造体ごとやりとりするようにすることでメソッド呼び出しを高速化してい
ます。vm_call_method() の引数が th, cfp, ci(callinfo) だけになってすっきりしま
した。また InstructionSequence の send/invokesuper/invokeblock 命令のオペランド
が変更になっています。マイクロベンチマークでメソッド呼び出しが10%くらい高速化さ
れているそうです。関数呼び出しの引数をマシンスタックに積むのって時間がかかるん
ですね……。この変更だけの影響ではないかもしれませんが。
また rb_call_info_t には call というメンバも追加されていて、メソッド呼び出しの
時に呼ぶ関数の関数ポインタが格納され、処理を切り替えることができるようになって
います。この時点では常に vm_call_general() という関数が使われていますが、r37186
で利用されています。
またメソッド呼び出しの flag に使うフラグに VM_CALL_ARGS_SKIP_SETUP というビット
フラグが追加されていて、条件はよく調べていませんが VM_CALL_ARGS_BLOCKARG_BIT か
VM_CALL_ARGS_SPLAT_BIT というフラグが立っていない時にはこのフラグが ON になって
、vm_caller_setup_args() *1の呼び出しをスキップするようにしています。他のビット
フラグ定数が XXX_BIT という名前なのでこれも _BIT をつけたほうがいいんじゃないか
なぁ。
その他、不要そうなメモリ初期化をコメントアウトしたり、細々と高速化のための対策
をしているようです。
