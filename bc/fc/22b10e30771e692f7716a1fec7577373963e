GVL(インタプリタで1つのスレッドだけが動作するために取得するロック)の実装を「完
全に書き直した」そうです。以前 fairness のためにリストでスレッドを管理して順番
に起こすようにしたしくみは廃止されて、シンプルに cond_wait と cond_signal で
rb_vm_t::gvl::acquired がを 0 になるまで待つモデルにして、fairness は gvl_yield
() という関数を導入して他のスレッドが GVL を確保したのをこれも cond_wait/
cond_signal で確実に知ってから再取得できるようにしています。また
rb_thread_t::running_time_us というメンバを追加して、スレッドが連続して動作した
時間をタイムスライス毎に加算していって、一定の値(priority によって増減するよう
にしていますが、だいたい 250msec)に達したら gvl_yield() を呼ぶようにしています
。
