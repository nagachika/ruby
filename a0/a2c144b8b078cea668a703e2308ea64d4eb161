続いてコンパイル(AST -> YARV 命令列)と実行部分のキーワード引数対応の実装です。
新しい命令の追加はなくて、キーワード引数情報つきののメソッド/ブロック呼び出しの
時にはキーワード引数用の Hash オブジェクトへ send 命令で key?, delete メソッド
を呼んで引数の値を取り出したり、またはデフォルト値をローカル変数/ブロック変数に
セットする命令を生成するようにしています。 Hash#key? や Hash#delete を再定義し
ている場合などは思わぬところで呼ばれる可能性があるので注意が必要ですね。またキ
ーワード引数つきの呼び出しのテストを追加しています。
さて簡単にキーワード引数の現在の実装の仕様を解説します。詳細はチケットや追加さ
れたテストを観てください。
まず以下のような構文でキーワード引数を受け取るメソッドを定義できます。
def m(a, b: 1)
  [a, b]
end
b がキーワード引数です。呼び出す時も似たような構文でキーワード引数を指定できま
す。 b は省略されるとデフォルトの値 1 が代入されます。
m(0) # => [0, 1]
m(0, b:2) # => [0, 2]
Python みたいにキーワード引数の順序に意味があって通常の引数のように渡せたりはし
ません。逆に言うとキーワード引数の指定の順序はいれかわってもかまいません。
def m2(a, b: 1, c: 2)
  [a, b, c]
end
m2(0)             #=> [0, 1, 2]
m2(0, c: 3)       # => [0, 1, 3]
m2(0, c: 1, b: 2) # => [0, 2, 1]
m2(0, 1, 2)       # => wrong number of arguments (3 for 1) (ArgumentError)
また仮引数にないキーワードを渡すのもエラーになります。
def m3(a: 0)
  a
end
m3(a: 1, b: 2)   # => unknown keyword: b (ArgumentError)
ただし "**" を前置した「キーワードrest引数」なるものを仮引数にもつ場合は未知の
キーワード引数も受け付けて、そこに Hash オブジェクトとして格納されます。
def m4(a: 0, **kw)
  [a, kw]
end
m4(a: 1)    #=> [1, {}]
m4(a: 1, b: 2, c: 3) #=> [1, {:b=>2, :c=>3}]
ざっとこのような感じです。キーワード引数の仕様についてはまだ議論が続いていて、
今回コミットされたものも最終決定というわけではなく今後の叩き台とするためという
位置付けだそうですので、興味のある人は trunk を使ってみてアイデアがあればチケッ
トや ML でコメントしてみてください。
