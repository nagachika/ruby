オブジェクトの実体である struct RVALUE を配列状につめこむ heap の領域(page)を確保する時に、malloc() が返すアドレスの前にメタデータを格納する領域を使うという前提で REQUIRED_SIZE_BY_MALLOC という定数で定義しているサイズぶん page のサイズを減らしてたのをやめています。ひとつには jemalloc() を使っている場合はメタデータは専用のページに作られるため単に無駄な隙間になってしまうというのと、glibc の実装の場合は確保した領域が OS 管理の page をまたがってしまうことがある(このため ruby のメモリ管理上の page が OS の page を余分に多くまたがってしまうのでパフォーマンス悪化に繋りうる)こと、さらに現在可能な場合は posix_memalign() などで OS の page に align して確保するようになっているため、実はメタデータが OS 管理側の page でひとつ前のところに乗ってしまって意図したようになってないという問題があるそうです。jemalloc() のほうはいいけど posix_memalign() の時の問題はこれでは解決しなさそうな気もするけどどうなんだろ。 [ruby-core:99000] [Feature #17002]
