load.c で loaded features への挿入時に一時的に利用する配列オブジェクトを
rb_ary_tmp_new() で作成していましたが、ObjectSpace を利用するため GC のマークが
行なわれるのを防ぐため xcalloc() で直接メモリ確保して RVALUE (struct RArray と
して確保していますが)として Ruby のメモリ管理の heap とは別のところにオブジェク
トを作っています。格納しているものが Fixnum のみで GC で管理する必要がないので
可能な方法なのでしょう。過去にも同様にスタック上にダミーの slot を置いたダミー
のオブジェクトを作る手法が使われてたことがあったと思いますが(確か VM の初期化の
あたりだったと…)、かなり思いきった方法ですね。これそんなに効くのかなぁ。
ChangeLog によるとやはり大規模なアプリケーションで minor GC の時間が 15% 減ると
いうことですが、大規模な Rails アプリとかだと loaded features がとても大きくな
るので効くのかなぁ。 struct RBasic::flags の初期化(T_ARRAY の型の指定)が直に書
かれているあたりとかちょっと座りの悪さを感じますね。 rb_ary_XXX() を便利関数と
して使いたいがためだけのオブジェクト化なのでいいんでしょうけど。
[ruby-core:58805] [Bug #9201]
