インクリメンタルGC が導入されました! [ruby-core:64383] [Feature #10137]
今回 CRuby に導入されたインクリメンタルGC は、既に導入されている世代別GC
(RGenGC) の major GC の make & sweep の mark 処理を複数回に分割して実行すること
で、major GC の停止時間を分散させるようにする機能のことです。オーバヘッドがある
のでスループット(全体の処理時間)は少しのびる可能性がありますが、応答性は良くな
る(グッ、と固まる時間が短くなる)ことが期待されます。
mark を断続的に実施するので、markの途中で Ruby のコードが動くことがあるため、既
に mark 済みのオブジェクトにまだ mark されていないオブジェクトの参照が増えて、
さらに他の参照はなくなると、mark 済みにオブジェクトから参照されているのに mark
されなくて回収されてしまうオブジェクトが発生するおそれがあります。これを避ける
ために、RGenGC で導入されていた Write Barrier を利用して、既に mark 済みのオブ
ジェクト(Incremental GC のアルゴリズムでは伝統的に Black と呼ぶそうです)に mark
されていないオブジェクト(同じく White と呼ぶ)の参照が作られる時に remember set
に追加して、mark されるようにしています。また CRuby の Write Barrier は完全では
なくて、WB-unprotected (shady)なオブジェクトというのもあるので、このオブジェク
トが mark された時も最後に 1step で mark 処理をまとめて実行することで mark 漏れ
を防ぐようにしています。 WB-unprotected なオブジェクトが減ったほうが効果的にな
るというのは RGenGC とも同じですね。
また、ついでに(?)、WB-protected かどうかのフラグは struct RBasic::flags ではな
くて外に bitmap で持つようにしていた(これは元からだと思いますが本格的に bitmap
のみ利用するようになります)ので、これを RGenGC の世代数(GC を生き延びた回数)の
カウンタに利用することで、3世代だったのを4世代(3回 GC を生き延びると OLD にな
る)に変更しています。
この世代別GC の略称は RIncGC なんですかね。
