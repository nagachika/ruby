RGenGC の世代を3つに分けるのをデフォルトにして slot 数の増加は抑えられたけど、
アプリケーションによってはまだ slot 数が多くなってしまうことがるかもしれないと
のことで、heaps を拡張(page を追加)するタイミングを変更しています。GC 後に充分
な空きスロットがなかったら heaps を拡張していたのを、major GC の後かその直後2回
の minor GC でのみ拡張するようにして、かわりに (major GC 後 3回目以降の) minor
GC 後に足りない時は次に major GC を実施するようにフラグを立てるようにしています
。これまでは全体の slot 数のうち old 世代と shady のオブジェクト数の割合が半分
以上になった時に major GC を実施するようにしていたので、比較的頻繁に major GC
を実施するようになったということみたいです。 [Bug #9607] https://
bugs.ruby-lang.org/issues/9607#note-9
これにより slot 数は小さい数で遷移するようになったので、メモリ使用量は抑えられ
るみたいで、チケットにはこの変更で GC がより省メモリでパフォーマンスは悪くなる
(頻繁に major GC するため)方向にチューニングしたことになるとあります。
ところでチケットの疑似コードの
if major_gc ||
   GC.count - last_major_gc > 2 # (A) extend heap at least 2 minor GC run
  extend_heap
else
  do_major_gc_at_next_gc = true
end
の部分と実際のパッチが微妙にうまく対応していないと思うのですがどっちが正しいん
でしょうか…。疑似コードだと「minor GC で前回の major GC からは 3回目以降」で空
きスロットが閾値を下回った時はいきなりヒープ拡張で、「minor GC で前回の major
GC から 2回目まで」の時は「次回 major GC にする」となっていて、実際の変更はこの
逆になっているような気がします。たぶん意図としては実際の変更が正しいような気が
しますが(さすがに 1回おきに major GC 連発はおかしい)。
またチケットには AGE2PROMOTION (infant -> young -> old の3つの世代を導入した
RGenGC)での young オブジェクト数についてのグラフもあって、ほとんど young のオブ
ジェクトは存在しないという結果を得ているみたいです。 AGE2PROMOTION は old にな
るのに猶予を与えるためにあるのかなって気がしますが、young が少ないということは
あまり効果はないのでしょうか。
