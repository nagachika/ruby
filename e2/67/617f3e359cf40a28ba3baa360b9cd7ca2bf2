PStore は thread_safe を省略可能引数で指定した時だけ Mutex を使って排他処理して
いましたが、それとは別に @transaction というインスタンス変数で重複してトランザ
クション処理に入ろうとすると thread_safe の指定にかかわらず例外を発生させるよう
になっていました。@transaction は削除して、常に Mutex による排他は有効にした上
で thread_safe が false の時は Mutex#locked? でチェックしてロック済みだと例外、
true なら Mutex の排他におまかせという仕組みにしています。またPStoreの
thread_safe引数に関するテストを追加しています。 [ruby-dev:43317] [Bug #4474]
PStore.new の第2引数の存在をはじめて知ったのですが、いまいち何のためなのかわか
らない仕様ですね。この修正後も @lock.locked? でチェックした後に切り替えが発生し
て別の Thread がロック取得したら結局 Mutex の排他処理まかせになるんじゃないか
(例外発生しない)とか考えると、thread_safe を指定する理由はどこにあるんだろうか
と。コメントを読むとパフォーマンスの為に云々とあり、Mutex#lock の負荷のことを言
っているように思えますが、ファイル入出力と比較してそんなに重いかなぁ。けどそう
だとすると常に Mutex を使うのはまずいのかも。
と、思っていたら同じようなことを遠藤さんが [ruby-dev:43333] で投稿されていたり
。
