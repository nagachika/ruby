GC の Bitmap Marking がコミットされています。 [ruby-dev:45085] [Feature #5839]
CRuby の GC は Mark&Sweep ベースで、これまではマークを各オブジェクトの struct
RVALUE に埋め込まれている flags のなかのビットを使って表現していたのですが、こ
れだと GC するたびに全てのオブジェクトスロットの領域にメモリ書き込みが行なわれ
るため、fork してそのまま動作する時にせっかく Copy On Write で共有できるかもし
れないメモリ領域が必ず複製されてしまうため、一部のアプリケーション(まあ
passenger 用ですかね)でメモリ使用量が増えてしまいます。マーク用の領域をオブジェ
クトそのものとは別に bitmap として持つようにすることで複製される領域を抑えるよ
うにしています。
また struct heap_slot から実際のオブジェクトの配列はポインタで持っていた(別途確
保していた)のを、struct heap_slot の後に連続したメモリ領域に確保するようにした
り、freelist をヒープスロット毎に持つようにしたり、アライメントされたメモリ確保
するために posix_memalign(3) など(プラットフォームによっていろいろ)を利用するよ
うにしたりしています。 free list の配置替えについては完全に理解できていないので
もうちょっとよく読みたいです。
slot_sweep() に fprintf で標準エラー出力にメッセージ出しているのはデバッグ用出
力の消し忘れでしょうか?
